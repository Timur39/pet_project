import asyncio
import os

import dotenv
from aiogram import Bot, Dispatcher, html
from aiogram import F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.types import Message

from get_data import all_data

dotenv.load_dotenv()
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv('BOT_TOKEN')
my_documents = []

dp = Dispatcher()


class Form(StatesGroup):
    first = State()
    second = State()


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /start, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message: Message
    :return: None
    """
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!\n–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ü§ñ, –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ —Ç–µ–±–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞üìÑ\n–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /help –æ–Ω–∞ –¥–∞—Å—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")


@dp.message(Command('help'))
async def help_handler(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /help, –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    :param message: Message
    :return: None
    """
    await message.answer(
        f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
        f'/my_documents - –≤–∞—à–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n'
        f'/help - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n'
        f'/pin_document - –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞')


@dp.message(Command('my_documents'))
async def my_documents_handler(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /my_documents, –≤—ã–≤–æ–¥–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞: –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    :param message: Message
    :return: None
    """
    button1 = [InlineKeyboardButton(text='–ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ãüìÑ', callback_data='view')]
    button2 = [InlineKeyboardButton(text='–ó–∞–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Çüìå', callback_data='pin')]
    buttons_list = [button1, button2]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons_list)
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ:', reply_markup=markup)


@dp.callback_query()
async def callback_query_handler(callback_query: CallbackQuery, state: FSMContext) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :param callback_query: CallbackQuery
    :return: None
    """
    if callback_query.data == 'pin':
        await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:')
        await state.set_state(Form.first)

    elif callback_query.data == 'view':
        if not my_documents:
            await callback_query.message.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!')
            return
        markup = InlineKeyboardMarkup(
            inline_keyboard=[doc for doc in my_documents])
        await callback_query.message.answer(f'–í–∞—à–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:', reply_markup=markup)


@dp.message(F.text, Form.first)
async def first_func(message: Message, state: FSMContext):
    s = False
    for i in range(len(all_data)):
        if message.text.lower() == all_data[i]['document'].lower():
            url = all_data[i]['link'] if all_data[i]['link'] and all_data[i]['link'].startswith('https://') else \
                all_data[i]['note'] if all_data[i]['note'] and all_data[i]['note'].startswith('https://') else \
                    all_data[i]['offers']
            if not url or not url.startswith('https://'):
                continue
            my_documents.append([InlineKeyboardButton(text=all_data[i]['document'], url=url)]),
            s = True
    if s:
        await message.answer(f'–î–æ–∫—É–º–µ–Ω—Ç {message.text} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω!')
        return
    else:
        await message.answer(
            f'–î–æ–∫—É–º–µ–Ω—Ç {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–õ–∏–±–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!')
        return


@dp.message(F.text)
async def get_documents_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –∏—â–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –≤—ã–¥–∞–µ—Ç –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    :param message: Message
    :return: None
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if message.from_user.id != int(os.getenv('USERS_NAME')):
        await message.answer('–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç—É–ø–∞!üõë')
        return
    try:
        inline_kb_list = []
        await message.answer(f"–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è...‚åõ")
        # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        for i in range(len(all_data)):
            if message.text.lower() in all_data[i]['document'].lower():
                url = all_data[i]['link'] if all_data[i]['link'] and all_data[i]['link'].startswith('https://') else \
                    all_data[i]['note'] if all_data[i]['note'] and all_data[i]['note'].startswith('https://') else \
                        all_data[i]['offers']
                if not url or not url.startswith('https://'):
                    continue
                inline_kb_list.append([InlineKeyboardButton(text=all_data[i]['document'], url=url)]),
        markup = InlineKeyboardMarkup(inline_keyboard=inline_kb_list)
        await message.answer(f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω–æ {len(inline_kb_list)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞(–æ–≤).", reply_markup=markup)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    except Exception as e:
        print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')
        await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ:")


async def main() -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    :return: None
    """
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)


# –ü—Ä–æ–≤–µ—Ä–∫–∞, –≥–¥–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ñ–∞–π–ª –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print('Starting...')
    asyncio.run(main())
