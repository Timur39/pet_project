import asyncio
import logging
import os
import sys
import time
from aiogram import Bot, Dispatcher, html
from aiogram import F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.types import Message
from dotenv import load_dotenv

from src.get_data import all_data
from src.postgres.main_db import create_table_users, insert_user, get_user_data, update_user_data

time.sleep(7)
load_dotenv()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv('TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))
my_documents = []

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

dp = Dispatcher()


class Form(StatesGroup):
    pin = State()


@dp.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /start, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: FSMContext
    :param message: Message
    :return: None
    """
    if await get_user_data(message.from_user.id):
        pass
    else:
        await insert_user({'user_id': message.from_user.id,
                           'full_name': message.from_user.full_name,
                           "attached_doc": [],
                           })
    await state.clear()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!\n–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ü§ñ, –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ —Ç–µ–±–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞üìÑ\n–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /help –æ–Ω–∞ –¥–∞—Å—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")


@dp.message(Command('help'))
async def help_handler(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /help, –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    :param message: Message
    :return: None
    """
    await message.answer(
        f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
        f'/my_docs - –≤–∞—à–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n'
        f'/all_docs - –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n'
        f'/help - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥')


@dp.message(Command('my_docs'))
async def my_documents_handler(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /my_docs, –≤—ã–≤–æ–¥–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞: –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    :param message: Message
    :return: None
    """
    button1 = [InlineKeyboardButton(text='–ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ãüìÑ', callback_data='view')]
    button2 = [InlineKeyboardButton(text='–ó–∞–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Çüìå', callback_data='pin')]
    button3 = [InlineKeyboardButton(text='–û—Ç–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Çüìå', callback_data='unpin')]
    buttons_list = [button1, button2, button3]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons_list)
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ:', reply_markup=markup)


@dp.message(Command('all_docs'))
async def all_docs_handler(message: Message, number: int = 0, cb_data: str = 'all') -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /all_docs, –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    :param cb_data: str = 'all_data'
    :param number: int = 0
    :param message: Message
    :return: None
    """
    counter = 0
    docs = []
    url = ''
    for doc in all_data:
        if doc['link']:
            if doc['link'].startswith('https://') or doc['link'].startswith('http://'):
                url = doc['link']
        elif doc['note']:
            if doc['note'].startswith('https://') or doc['note'].startswith('http://'):
                url = doc['note']
        elif doc['offers']:
            if doc['offers'].startswith('https://') or doc['offers'].startswith('http://'):
                url = doc['offers']
        else:
            continue
        if number == 0 and len(docs) < 50:
            docs.append([InlineKeyboardButton(text=doc['document'], url=url)])
        elif number == 1 and len(docs) < 50:
            if counter <= 50:
                counter += 1
                continue
            docs.append([InlineKeyboardButton(text=doc['document'], url=url)])
        elif number == 2 and len(docs) < 50:
            if counter <= 100:
                counter += 1
                continue
            docs.append([InlineKeyboardButton(text=doc['document'], url=url)])
        else:
            if counter <= 150:
                counter += 1
                continue
            docs.append([InlineKeyboardButton(text=doc['document'], url=url)])
    if number != 3 and number != 2 if len(all_data) <= 200 else True:
        docs.append([InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ...', callback_data=cb_data)])
    markup = InlineKeyboardMarkup(inline_keyboard=docs)
    await message.answer(f'–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:', reply_markup=markup)


@dp.callback_query()
async def callback_query_handler(callback_query: CallbackQuery, state: FSMContext) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :param state: FSMContext
    :param callback_query: CallbackQuery
    :return: None
    """
    global my_documents
    user_data = await get_user_data(callback_query.from_user.id)
    data = callback_query.data
    if data == 'all':
        await all_docs_handler(callback_query.message, 1, 'all_2')
    elif data == 'all_2':
        await all_docs_handler(callback_query.message, 2, 'all_3')
    elif data == 'all_3':
        await all_docs_handler(callback_query.message, 3, 'all')
    elif data == 'pin':
        await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:')
        await state.set_state(Form.pin)
    elif data == 'unpin':
        if not user_data:
            await callback_query.message.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!')
            return
        elif not user_data['attached_doc']:
            await callback_query.message.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!')
            return
        else:
            docs = []
            for i in range(len(user_data['attached_doc']) // 2):
                doc = [InlineKeyboardButton(text='', callback_data=f'{i}')]
                docs.append(doc)
            markup = InlineKeyboardMarkup(inline_keyboard=docs)
            await callback_query.message.answer(f'–í–∞—à–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:', reply_markup=markup)
    elif data.isdigit():
        try:
            i = int(data)

            if len(my_documents) == 1:
                deleted_doc = my_documents.pop(0)
                await callback_query.answer(f'–î–æ–∫—É–º–µ–Ω—Ç {deleted_doc[0].text} –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω')
            else:
                deleted_doc = my_documents.pop(i)
                await callback_query.answer(f'–î–æ–∫—É–º–µ–Ω—Ç {deleted_doc[0].text} –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω')
        except:
            pass
    elif data == 'view':
        if not user_data:
            await callback_query.message.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!')
            return
        elif not user_data['attached_doc']:
            await callback_query.message.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!')
            return
        buttons = []
        print([doc.split('*') for doc in user_data['attached_doc']])
        for doc in user_data['attached_doc']:
            buttons.append([InlineKeyboardButton(text=doc.split('*')[0], url=doc.split('*')[1])])
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback_query.message.answer(f'–í–∞—à–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:', reply_markup=markup)
    elif data.split(' ')[0] == 'pin_document':
        i = int(data.split(' ')[1])
        url = all_data[i]['link'] if all_data[i]['link'] and all_data[i]['link'].startswith('https://') else \
            all_data[i]['note'] if all_data[i]['note'] and all_data[i]['note'].startswith('https://') else \
            all_data[i]['offers']

        users_lst = []
        for doc in user_data['attached_doc']:
            users_lst.append(doc.split('*'))
        if not all_data[i]['document'] in [item for sublist in users_lst for item in sublist]:
            print(all_data[i]['document'])
            print([item for sublist in users_lst for item in sublist])
            my_documents.append([InlineKeyboardButton(text=all_data[i]['document'], url=url)]),
            await callback_query.answer(f'–î–æ–∫—É–º–µ–Ω—Ç {all_data[i]['document']} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω')
            user_data['attached_doc'] += [f'{all_data[i]['document']}*{url}']
            await update_user_data(user_data)
            await state.clear()
        else:
            await callback_query.answer(f'–î–æ–∫—É–º–µ–Ω—Ç {all_data[i]['document']} —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω')
            await state.clear()



@dp.message(F.text, Form.pin)
async def pin_document_func(message: Message, state: FSMContext):
    suitable_docs = []
    user_data = await get_user_data(message.from_user.id)
    for i in range(len(all_data)):
        url = all_data[i]['link'] if all_data[i]['link'] and all_data[i]['link'].startswith('https://') else \
            all_data[i]['note'] if all_data[i]['note'] and all_data[i]['note'].startswith('https://') else \
            all_data[i]['offers']
        if message.text.lower() == all_data[i]['document'].lower():
            if all_data[i]['document'] in user_data['attached_doc']:
                await message.answer(f'–î–æ–∫—É–º–µ–Ω—Ç {all_data[i]['document']} —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω!')
                await state.clear()
                return
            elif not url or not url.startswith('https://'):
                continue
            # my_documents.append([InlineKeyboardButton(text=all_data[i]['document'], url=url)]),
            await message.answer(f'–î–æ–∫—É–º–µ–Ω—Ç {all_data[i]['document']} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω!')
            await state.clear()
            user_data['attached_doc'] += [f'{all_data[i]['document']}*{url}']
            await update_user_data(user_data)
            return
        elif message.text.lower() in all_data[i]['document'].lower():
            if not url or not url.startswith('https://'):
                continue
            suitable_docs.append(
                [InlineKeyboardButton(text=all_data[i]['document'], callback_data=f'pin_document {i}')]),
    if not suitable_docs:
        await message.answer(
            f'–î–æ–∫—É–º–µ–Ω—Ç {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n')
        return
    else:
        markup = InlineKeyboardMarkup(inline_keyboard=suitable_docs)
        await message.answer(
            f'–î–æ–∫—É–º–µ–Ω—Ç {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:', reply_markup=markup)
        return


@dp.message(F.text)
async def get_documents_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –∏—â–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –≤—ã–¥–∞–µ—Ç –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    :param message: Message
    :return: None
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    # if message.from_user.id != int(os.getenv('USERS_ID')) and message.from_user.full_name != int(os.getenv('USERS_FULL_NAME')):
    #     await message.answer('–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç—É–ø–∞!üõë')
    #     return
    try:
        inline_kb_list = []
        await message.answer(f"–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è...‚åõ")
        # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        for i in range(len(all_data)):
            if message.text.lower() in all_data[i]['document'].lower():
                url = all_data[i]['link'] if all_data[i]['link'] and all_data[i]['link'].startswith('https://') else \
                    all_data[i]['note'] if all_data[i]['note'] and all_data[i]['note'].startswith('https://') else \
                    all_data[i]['offers']
                if not url or not url.startswith('https://'):
                    continue
                inline_kb_list.append([InlineKeyboardButton(text=all_data[i]['document'], url=url)]),
        markup = InlineKeyboardMarkup(inline_keyboard=inline_kb_list)
        await message.answer(f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω–æ {len(inline_kb_list)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞(–æ–≤).", reply_markup=markup)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    except Exception as e:
        print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')
        await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ:")


async def on_startup() -> None:
    # –°–æ–∑–¥–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    await create_table_users()

    # –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω
    await bot.send_message(chat_id=ADMIN_ID, text='–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')


async def on_shutdown() -> None:
    # –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    await bot.send_message(chat_id=ADMIN_ID, text='–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')


async def main() -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    :return: None
    """
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    await dp.start_polling(bot)


# –ü—Ä–æ–≤–µ—Ä–∫–∞, –≥–¥–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ñ–∞–π–ª –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print('Starting...')
    logging.basicConfig(level=logging.INFO, stream=sys.stdout,
                        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    asyncio.run(main())
