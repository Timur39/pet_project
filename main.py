import asyncio
import logging
import os
import sys

from aiogram import Bot, Dispatcher, html
from aiogram import F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, \
    KeyboardButton, ReplyKeyboardRemove
from aiogram.types import Message
from dotenv import load_dotenv

from src.KonsultantPlus_get_data import get_data_by_name
from src.get_data_from_google_disk import all_data, all_data_with_folder
from src.keyboard import admin_kb, my_docs_kb, pin_doc_kb
from src.sqlite.main_db_sqlite import initialize_database, add_user, get_user_by_id, update_attached_docs, add_review, \
    get_all_review, get_all_users

load_dotenv()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv('TOKEN')
# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ ID –≥—Ä—É–ø–ø—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏
ADMIN_ID = int(os.getenv('ADMIN_ID'))
REVIEWS_ID = int(os.getenv('REVIEWS_ID'))

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

dp = Dispatcher()


class Form(StatesGroup):
    pin = State()
    all_pin = State()
    reviews = State()
    consultant = State()


@dp.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /start, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: FSMContext
    :param message: Message
    :return: None
    """
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await add_user(message.from_user.id, message.from_user.full_name, str([]))

    await state.clear()
    message_for_admin = ''
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
    if message.from_user.id == ADMIN_ID:
        message_for_admin = '\n‚öôÔ∏è–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - /admin'
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!\n"
        f"–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ü§ñ, —Å –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å:\n\n"
        f"1Ô∏è‚É£ –ù–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –û–ì–° (–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ —Ç–µ–±–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ '–°–æ–æ–±—â–µ–Ω–∏–µ')\n\n"
        f"2Ô∏è‚É£ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –û–ì–° /all_docs\n\n"
        f"3Ô∏è‚É£ –ó–∞–∫—Ä–µ–ø–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ /my_docs\n\n\n"
        f"üìù–û—Ç–∑—ã–≤/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–≤–æ–ø—Ä–æ—Å - /reviews{message_for_admin}")


@dp.message(Command('consultant_plus'))
async def consultant_plus_handler(message: Message, state: FSMContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /consultant_plus, –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ ConsultantPlus
    :param: message: Message
    :param: state: FSMContext
    :return: None
    """
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ (–∫–æ–¥–µ–∫—Å, –∑–∞–∫–æ–Ω –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã): ')
    await state.set_state(Form.consultant)


@dp.message(Command('reviews'))
async def reviews_handler(message: Message, state: FSMContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /reviews, –¥–∞–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
    :param state:
    :param message: Message
    :return: None
    """
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await add_user(message.from_user.id, message.from_user.full_name, str([]))

    await message.answer('–ù–∞–ø–∏—à–∏ –∑–¥–µ—Å—å –æ—Ç–∑—ã–≤/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–≤–æ–ø—Ä–æ—Å:')
    await state.set_state(Form.reviews)


@dp.message(Command('my_docs'))
async def my_documents_handler(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /my_docs, –≤—ã–≤–æ–¥–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞:
    * –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    * –∑–∞–∫—Ä–µ–ø–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    * –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    :param message: Message
    :return: None
    """
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await add_user(message.from_user.id, message.from_user.full_name, str([]))
    # –ü–æ—è–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ:', reply_markup=my_docs_kb())


# TODO: –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Å–ª–∏—à–∫–æ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
# TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ
@dp.message(Command('all_docs'))
async def all_docs_handler(message: Message, number1: int = 0, number2: int = 50) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /all_docs, –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –ø–∞–ø–∫–∏ –ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞,
    —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–≤ –∏—Ö –ø–æ –ø–∞–ø–∫–∞–º
    :param number1: int = 0
    :param number2: int = 10
    :param message: Message
    :return: None
    """
    global folder
    global last_folder
    global pre_last_folder
    global last_button_data
    global button_data
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await add_user(message.from_user.id, message.from_user.full_name, str([]))
    # –°–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    folder = all_data_with_folder
    last_folder = []
    pre_last_folder = []
    last_button_data = ''
    button_data = ''
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø–∞–ø–∫–∏ –ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–≤ –∏—Ö –ø–æ –ø–∞–ø–∫–∞–º
    docs = []
    for folder2 in all_data_with_folder[number1:number2]:
        if folder2['documents']:
            docs.append([InlineKeyboardButton(text=folder2['name'], callback_data=folder2['data'])])
        else:
            docs.append([InlineKeyboardButton(text=folder2['name'], url=folder2['link'])])
    markup = InlineKeyboardMarkup(inline_keyboard=docs)

    # –í—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    await message.answer(f'–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:', reply_markup=markup)


@dp.message(Command('admin'))
async def admin_handler(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /admin, –≤—ã–≤–æ–¥–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
    :param message: Message
    :return: None
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    if message.from_user.id == ADMIN_ID:
        # –í—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='‚öôÔ∏è–ê–¥–º–∏–Ω–∫–∞')]], resize_keyboard=True,
                                     one_time_keyboard=True)
        await message.answer('–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞!', reply_markup=markup)
    else:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')


@dp.callback_query()
async def callback_query_handler(callback_query: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–∞–Ω–Ω—ã—Ö (–Ω–∞ –∫–∞–∫—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    :param state: FSMContext
    :param callback_query: CallbackQuery
    :return: None
    """
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await add_user(callback_query.from_user.id, callback_query.message.from_user.full_name, str([]))
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_data = await get_user_by_id(callback_query.from_user.id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–∞–Ω–Ω—ã—Ö
    data = callback_query.data
    if data.split('*')[0] == 'all':
        data = data.split('*')
        await all_docs_handler(callback_query.message, int(data[1]) + 50, int(data[2]) + 50)
    elif data.split('*')[0] == 'pin_all':
        data = data.split('*')
        await pin_all_document_func(callback_query.message, int(data[1]) + 50, int(data[2]) + 50)
    elif 'add_10' in data:
        data = data.split('*')
        data2 = ''
        if len(data) >= 4:
            data2 = data[3]
        await consultant_plus_handler(callback_query.message, state, data2, int(data[1]) + 10,
                                      int(data[2]) + 10)
    elif data == 'By_name':
        await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:')
        await state.set_state(Form.pin)
    elif data == 'By_all_docs':
        await pin_all_document_func(callback_query.message)
    elif data == 'pin':
        await callback_query.message.answer('–ó–∞–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç:', reply_markup=pin_doc_kb())
    elif data == 'unpin':
        if not user_data['attached_docs']:
            await callback_query.message.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!')
            return
        docs = []
        for i in range(len(user_data['attached_docs'])):
            doc_button = [InlineKeyboardButton(
                text=user_data['attached_docs'][i][0],
                callback_data=f'{len(user_data['attached_docs'][i][0])} {user_data['attached_docs'][i][0][:30]}'
            )]
            docs.append(doc_button)
        markup = InlineKeyboardMarkup(inline_keyboard=docs)
        await callback_query.message.answer(f'–í–∞—à–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:', reply_markup=markup)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è, –∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å
    elif data.split(' ')[0].isdigit():
        data = data.split(' ')
        for i in range(len(user_data['attached_docs'])):
            if int(data[0]) == len(user_data['attached_docs'][i][0]) and data[1] in user_data['attached_docs'][i][0]:
                await callback_query.answer(f'–î–æ–∫—É–º–µ–Ω—Ç {user_data['attached_docs'][i][0]} –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω')
                # –£–¥–∞–ª—è—é –¥–æ–∫—É–º–µ–Ω—Ç
                user_data['attached_docs'].remove(user_data['attached_docs'][i])
                # –û–±–Ω–æ–≤–ª—è—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await update_attached_docs(callback_query.from_user.id, str(user_data['attached_docs']))
                return
        await callback_query.answer(f'–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω')
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è, –∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω—É–∂–Ω–æ –∑–∞–∫—Ä–µ–ø–∏—Ç—å
    elif data.split(' ')[0] == 'pin_document':
        i = int(data.split(' ')[1])
        url = all_data[i]['link']

        if not all_data[i]['name'] in [doc[0] for doc in user_data['attached_docs']]:
            await callback_query.answer(f'–î–æ–∫—É–º–µ–Ω—Ç {all_data[i]['name']} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω')
            # –î–æ–±–∞–≤–ª—è—é –¥–æ–∫—É–º–µ–Ω—Ç
            user_data['attached_docs'].append([all_data[i]['name'], url])
            # –û–±–Ω–æ–≤–ª—è—é –±–¥
            await update_attached_docs(callback_query.from_user.id, str(user_data['attached_docs']))

            await state.clear()
        else:
            await callback_query.answer(f'–î–æ–∫—É–º–µ–Ω—Ç {all_data[i]['name']} —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω')
            await state.clear()
    elif data == 'view':
        if not user_data['attached_docs']:
            await callback_query.message.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!')
            return
        buttons = []
        for doc in user_data['attached_docs']:
            buttons.append([InlineKeyboardButton(text=doc[0], url=doc[1])])
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback_query.message.answer(f'–í–∞—à–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:', reply_markup=markup)
    else:
        await callback_query_handler_all(callback_query, state)


# –ü—Ä–æ—à–ª–∞—è –ø–∞–ø–∫–∞
last_folder = []
# –ü—Ä–µ–¥ –ø—Ä–æ—à–ª–∞—è –ø–∞–ø–∫–∞
pre_last_folder = []
# –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞
folder = []
# –ü—Ä–æ—à–ª—ã–µ –¥–∞–Ω–Ω—ã–µ(id) –Ω–∞–∂–∞—Ç–æ–π –ø–∞–ø–∫–∏
last_button_data = ''
# –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ(id) –Ω–∞–∂–∞—Ç–æ–π –ø–∞–ø–∫–∏
button_data = ''


# TODO: —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤—ã–¥–∞–≤–∞—Ç—å –µ–≥–æ, —É–¥–∞–ª—è—è –ø—Ä–æ—à–ª–æ–µ
@dp.callback_query()
async def callback_query_handler_all(callback_query: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ø–∞–ø–∫—É, –ø—Ä–∏ –≤—ã–¥–∞—á–µ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /all_docs
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return: None
    """
    global last_folder
    global folder
    global button_data
    global last_button_data
    global pre_last_folder

    data = callback_query.data
    if data:
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
        if data == 'back':
            if last_folder == all_data_with_folder:
                await callback_query.message.delete()
                await all_docs_handler(callback_query.message)
                return
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            folder = pre_last_folder
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å
            data = last_button_data

        if not folder:
            folder = all_data_with_folder

        buttons = []
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–ø–∫–µ
        for i in folder:
            # –ü–æ–∏—Å–∫ –≤ –Ω–µ–π –ø–æ–¥—Ö–æ–¥—è—â–µ–π –ø–∞–ø–∫–∏
            if data == i['data']:
                if i['documents']:
                    if last_folder:
                        pre_last_folder = last_folder
                    if last_folder != folder:
                        last_folder = folder
                    last_button_data = button_data
                    button_data = i['data']
                    folder = i['documents']
                    for j in i['documents']:
                        if not j.get('documents'):
                            buttons.append([InlineKeyboardButton(text=j['name'], url=j['link'])])
                        else:
                            buttons.append([InlineKeyboardButton(text=j['name'], callback_data=j['data'])])
                else:
                    buttons.append([InlineKeyboardButton(text='–ü—É—Å—Ç–æ', callback_data='–ø—É—Å—Ç–æ')])
        buttons.append([InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')])
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.delete()
        # –í—ã–¥–∞—á–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç:', reply_markup=markup)


@dp.message((F.from_user.id == ADMIN_ID) & (F.text == '‚öôÔ∏è–ê–¥–º–∏–Ω–∫–∞'))
async def admin_view_kb(message: Message) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∫–∏
    :param message: Message
    :return: None
    """
    await message.answer('–ê–¥–º–∏–Ω–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!', reply_markup=admin_kb())


@dp.message(F.text, Form.consultant)
async def consultant_plus_handler(message: Message, state: FSMContext, document: str = '', number1: int = 0,
                                  number2: int = 10) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /consultant_plus, –ø–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ ConsultantPlus'–∞
    :param number2: int = 10
    :param number1: int = 0
    :param document: str = ''
    :param state: FSMContext
    :param message: Message
    :return: None
    """
    # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑
    if number1 == 0:
        document = message.text
    consultant_data = []
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if not get_data_by_name(document):
        consultant_data = get_data_by_name(document)
    else:
        consultant_data = get_data_by_name(document)
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    if not consultant_data:
        await message.answer('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        for data in consultant_data[number1:number2]:
            if consultant_data.index(data) == number2 - 1 and len(consultant_data) > number2:
                markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text='–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ...',
                        callback_data=f'add_10*{number1}*{number2}*{document}'
                    )]
                ])
                await message.answer(
                    f'<a href="{data['link']}"><b>{data['name'][1]}</b></a>\n{data['name'][2] if len(data['name']) > 2 else ''}',
                    reply_markup=markup)
            else:
                await message.answer(
                    f'<a href="{data['link']}"><b>{data['name'][1]}</b></a>\n{data['name'][2] if len(data['name']) > 2 else ''}')

        await state.clear()


@dp.message(F.text, Form.reviews)
async def reviews_function(message: Message, state: FSMContext) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
    :param message: Message
    :param state: FSMContext
    :return: None
    """
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await add_user(message.from_user.id, message.from_user.full_name, str([]))
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await add_review(message.from_user.full_name, message.text)

    await message.answer(f'–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!')
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞
    await bot.send_message(REVIEWS_ID, f'{message.from_user.full_name} –¥–æ–±–∞–≤–∏–ª(–∞) –æ—Ç–∑—ã–≤: {message.text}')
    await state.clear()


@dp.message(F.text, Form.pin)
async def pin_document_func(message: Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    :param message: Message
    :param state: State
    :return: None
    """
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await add_user(message.from_user.id, message.from_user.full_name, str([]))
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await get_user_by_id(message.from_user.id)
    # –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    suitable_docs = []
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    for i in range(len(all_data)):
        url = all_data[i]['link']
        # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —É–∫–∞–∑–∞–Ω —Ç–æ—á–Ω–æ
        if message.text.lower() == all_data[i]['name'].lower():
            # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω
            if all_data[i]['name'] in [doc[0] for doc in user_data['attached_docs']]:
                await message.answer(f'–î–æ–∫—É–º–µ–Ω—Ç {all_data[i]['name']} —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω!')
                await state.clear()
                return

            await message.answer(f'–î–æ–∫—É–º–µ–Ω—Ç {all_data[i]['name']} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω!')

            await state.clear()
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            user_data['attached_docs'].append([all_data[i]['name'], url])
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await update_attached_docs(message.from_user.id, str(user_data['attached_docs']))
            return
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        elif message.text.lower() in all_data[i]['name'].lower():
            suitable_docs.append(
                [InlineKeyboardButton(text=all_data[i]['name'], callback_data=f'pin_document {i}')]),
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if not suitable_docs:
        await message.answer(
            f'–î–æ–∫—É–º–µ–Ω—Ç {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n')
        return
    markup = InlineKeyboardMarkup(inline_keyboard=suitable_docs)
    await message.answer(
        f'–î–æ–∫—É–º–µ–Ω—Ç {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:', reply_markup=markup)


# TODO: —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ø–∞–ø–∫–∞–º
async def pin_all_document_func(message: Message, number1: int = 0, number2: int = 50) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    :param message: Message
    :param number1: int = 0
    :param number2: int = 50
    :return: None
    """
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await add_user(message.from_user.id, message.from_user.full_name, str([]))
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await get_user_by_id(message.from_user.id)

    docs = []
    # –í—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
    for data in all_data[number1:number2]:
        docs.append([InlineKeyboardButton(text=data['name'], callback_data=f'pin_document {all_data.index(data)}')])
    # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º–Ω–æ–≥–æ, —Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ...
    if len(all_data) > number2:
        docs.append([InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ...', callback_data=f'pin_all*{number1}*{number2}')])
    markup = InlineKeyboardMarkup(inline_keyboard=docs)
    await message.answer(f'–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:', reply_markup=markup)


@dp.message(F.text, F.from_user.id == ADMIN_ID)
async def admin_access(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –∞–¥–º–∏–Ω–∫–µ
    :param message: Message
    :param state: FSMContext
    :return: None
    """
    if message.text == 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = await get_all_users()
        # –í—ã–≤–æ–¥ –∏—Ö –∞–¥–º–∏–Ω—É
        for user in all_users:
            await message.answer(
                f'<span class="tg-spoiler">{user['user_id']}</span> {user['full_name']}\n–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(user['attached_docs'])}')
    elif message.text == 'üìù –û—Ç–∑—ã–≤—ã':
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤
        all_reviews = await get_all_review()
        # –í—ã–≤–æ–¥ –∏—Ö –∞–¥–º–∏–Ω—É
        for review in all_reviews:
            await message.answer(f'{review['full_name']} - {review['review']}')
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤
        if len(all_reviews) == 0:
            await message.answer(f'–û—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç!')
    elif message.text == '‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏':
        remove_markup = ReplyKeyboardRemove()
        await message.answer(f'–ê–¥–º–∏–Ω–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!', reply_markup=remove_markup)
    else:
        await get_documents_handler(message)


@dp.message(F.text)
async def get_documents_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –∏—â–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –≤—ã–¥–∞–µ—Ç –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    :param message: Message
    :return: None
    """
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await add_user(message.from_user.id, message.from_user.full_name, str([]))
    try:
        inline_kb_list = []
        await message.answer(f"–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è...‚åõ")
        # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        for i in range(len(all_data)):
            if message.text.lower() in all_data[i]['name'].lower():
                url = all_data[i]['link']
                for button in inline_kb_list:
                    if button[0].url == url:
                        continue
                inline_kb_list.append([InlineKeyboardButton(text=all_data[i]['name'], url=url)]),
        markup = InlineKeyboardMarkup(inline_keyboard=inline_kb_list)
        await message.answer(f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω–æ {len(inline_kb_list)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞(–æ–≤).", reply_markup=markup)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    except Exception as e:
        print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')
        await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ:")


async def on_startup() -> None:
    # –°–æ–∑–¥–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    await initialize_database()
    # –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω
    await bot.send_message(chat_id=ADMIN_ID, text='–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')


async def on_shutdown() -> None:
    # –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    await bot.send_message(chat_id=ADMIN_ID, text='–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')


async def main() -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    :return: None
    """
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    await dp.start_polling(bot)


# –ü—Ä–æ–≤–µ—Ä–∫–∞, –≥–¥–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ñ–∞–π–ª –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print('Starting...')
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO, stream=sys.stdout,
                        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    asyncio.run(main())
